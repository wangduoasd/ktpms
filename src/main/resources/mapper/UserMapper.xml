<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kaituo.pms.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.kaituo.pms.bean.User" >
    <constructor >
      <idArg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_integral" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_dept_position" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_inductiontime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <resultMap id="MyResultMap" type="com.kaituo.pms.bean.User" >
    <constructor >
      <arg column="num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_integral" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="dept_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="position_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_inductiontime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="user_password" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    user_id, user_name, user_password, user_integral, user_dept_position, user_status,
    user_inductiontime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.kaituo.pms.bean.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from p_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from p_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from p_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.kaituo.pms.bean.UserExample" >
    delete from p_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.kaituo.pms.bean.User" >
    insert into p_user (user_id, user_name, user_password,
      user_integral, user_dept_position, user_status,
      user_inductiontime)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR},
      #{userIntegral,jdbcType=INTEGER}, #{userDeptPosition,jdbcType=INTEGER}, #{userStatus,jdbcType=INTEGER},
      #{userInductiontime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.kaituo.pms.bean.User" >
    insert into p_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userPassword != null" >
        user_password,
      </if>
      <if test="userIntegral != null" >
        user_integral,
      </if>
      <if test="userDeptPosition != null" >
        user_dept_position,
      </if>
      <if test="userStatus != null" >
        user_status,
      </if>
      <if test="userInductiontime != null" >
        user_inductiontime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userIntegral != null" >
        #{userIntegral,jdbcType=INTEGER},
      </if>
      <if test="userDeptPosition != null" >
        #{userDeptPosition,jdbcType=INTEGER},
      </if>
      <if test="userStatus != null" >
        #{userStatus,jdbcType=INTEGER},
      </if>
      <if test="userInductiontime != null" >
        #{userInductiontime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.kaituo.pms.bean.UserExample" resultType="java.lang.Integer" >
    select count(*) from p_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <!--积分排行榜-->
    <select id="selectUsersByView" resultMap="MyResultMap">
      select * from (SELECT (SELECT @num:=@num+1 FROM (SELECT @num:=0) r)  AS num,v.* FROM
        (SELECT
           u.user_name          AS user_name,
           d.dept_name          AS dept_name,
           p.position_name      AS position_name,
           u.user_id            AS user_id,
           u.user_inductiontime AS user_inductiontime,
           u.user_integral      AS user_integral,
           u.user_status        AS user_status,
           u.user_password      AS user_password
         FROM p_user u,p_dept d,p_position p
         WHERE u.user_dept_position = p.dept_position_id
               AND p.dept_id = d.dept_id
               AND u.user_status != 4
               AND u.user_status != 5
         ORDER BY u.user_integral DESC) v) v_user where user_status != ${5} and user_status != ${4}
    </select>

    <update id="updateByExampleSelective" parameterType="map" >
    update p_user
    <set >
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.userName != null" >
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userPassword != null" >
        user_password = #{record.userPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.userIntegral != null" >
        user_integral = #{record.userIntegral,jdbcType=INTEGER},
      </if>
      <if test="record.userDeptPosition != null" >
        user_dept_position = #{record.userDeptPosition,jdbcType=INTEGER},
      </if>
      <if test="record.userStatus != null" >
        user_status = #{record.userStatus,jdbcType=INTEGER},
      </if>
      <if test="record.userInductiontime != null" >
        user_inductiontime = #{record.userInductiontime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update p_user
    set user_id = #{record.userId,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_password = #{record.userPassword,jdbcType=VARCHAR},
      user_integral = #{record.userIntegral,jdbcType=INTEGER},
      user_dept_position = #{record.userDeptPosition,jdbcType=INTEGER},
      user_status = #{record.userStatus,jdbcType=INTEGER},
      user_inductiontime = #{record.userInductiontime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.kaituo.pms.bean.User" >
    update p_user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        user_password = #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userIntegral != null" >
        user_integral = #{userIntegral,jdbcType=INTEGER},
      </if>
      <if test="userDeptPosition != null" >
        user_dept_position = #{userDeptPosition,jdbcType=INTEGER},
      </if>
      <if test="userStatus != null" >
        user_status = #{userStatus,jdbcType=INTEGER},
      </if>
      <if test="userInductiontime != null" >
        user_inductiontime = #{userInductiontime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kaituo.pms.bean.User" >
    update p_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_integral = #{userIntegral,jdbcType=INTEGER},
      user_dept_position = #{userDeptPosition,jdbcType=INTEGER},
      user_status = #{userStatus,jdbcType=INTEGER},
      user_inductiontime = #{userInductiontime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
<!--自定义个人信息-->
  <select id="findPersonalDetail" parameterType="java.lang.Integer" resultMap="MyResultMap">
    select num,user_name,dept_name,position_name,user_id,user_inductiontime,user_integral,user_status,user_password
    from (SELECT (SELECT @num:=@num+1 FROM (SELECT @num:=0) r)  AS num,v.* FROM
    (SELECT
    u.user_name          AS user_name,
    d.dept_name          AS dept_name,
    p.position_name      AS position_name,
    u.user_id            AS user_id,
    u.user_inductiontime AS user_inductiontime,
    u.user_integral      AS user_integral,
    u.user_status        AS user_status,
    u.user_password      AS user_password
    FROM p_user u,p_dept d,p_position p
    WHERE u.user_dept_position = p.dept_position_id
    AND p.dept_id = d.dept_id
    AND u.user_status != 4
    AND u.user_status != 5
    ORDER BY u.user_integral DESC) v) v_user where user_id=#{userId}
  <!--积分排行榜的条数-->
  </select>
    <select id="countUsersByView" resultType="java.lang.Long">
      select count(*) from (SELECT (SELECT @num:=@num+1 FROM (SELECT @num:=0) r)  AS num,v.* FROM
        (SELECT
           u.user_name          AS user_name,
           d.dept_name          AS dept_name,
           p.position_name      AS position_name,
           u.user_id            AS user_id,
           u.user_inductiontime AS user_inductiontime,
           u.user_integral      AS user_integral,
           u.user_status        AS user_status,
           u.user_password      AS user_password
         FROM p_user u,p_dept d,p_position p
         WHERE u.user_dept_position = p.dept_position_id
               AND p.dept_id = d.dept_id
               AND u.user_status != 4
               AND u.user_status != 5
         ORDER BY u.user_integral DESC) v) v_user where user_status != ${5} and user_status != ${4}
    </select>
    <!--按检索条件查询积分排行-->
    <select id="selectUsersByViewAndCondition" parameterType="java.lang.String" resultMap="MyResultMap">
        select num,user_name,dept_name,position_name,user_id,user_inductiontime,user_integral,user_status,user_password
         from (SELECT (SELECT @num:=@num+1 FROM (SELECT @num:=0) r)  AS num,v.* FROM
           (SELECT
              u.user_name          AS user_name,
              d.dept_name          AS dept_name,
              p.position_name      AS position_name,
              u.user_id            AS user_id,
              u.user_inductiontime AS user_inductiontime,
              u.user_integral      AS user_integral,
              u.user_status        AS user_status,
              u.user_password      AS user_password
            FROM p_user u,p_dept d,p_position p
            WHERE u.user_dept_position = p.dept_position_id
                  AND p.dept_id = d.dept_id
                  AND u.user_status != 4
                  AND u.user_status != 5
            ORDER BY u.user_integral DESC) v) v_user where user_status != ${5} and user_status != ${4} and user_name like concat(concat('%',#{condition}),'%')
                                       or dept_name like concat(concat('%',#{condition}),'%')
    </select>
    <!--按检索条件查询积分排行的数据条数-->
    <select id="countUsersByViewAndCondition" resultType="java.lang.Long">
        select count(*) from (SELECT (SELECT @num:=@num+1 FROM (SELECT @num:=0) r)  AS num,v.* FROM
          (SELECT
             u.user_name          AS user_name,
             d.dept_name          AS dept_name,
             p.position_name      AS position_name,
             u.user_id            AS user_id,
             u.user_inductiontime AS user_inductiontime,
             u.user_integral      AS user_integral,
             u.user_status        AS user_status,
             u.user_password      AS user_password
           FROM p_user u,p_dept d,p_position p
           WHERE u.user_dept_position = p.dept_position_id
                 AND p.dept_id = d.dept_id
                 AND u.user_status != 4
                 AND u.user_status != 5
           ORDER BY u.user_integral DESC) v) v_user where user_status != ${5} and user_status != ${4} and user_name like concat(concat('%',#{condition}),'%')
                                       or dept_name like concat(concat('%',#{condition}),'%')
    </select>
  <resultMap id="UserSetResultMap" type="com.kaituo.pms.bean.User" >
    <constructor >
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dept_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="dept_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dept_position_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="position_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_inductiontime" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="user_integral" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_password" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <!--综服中心_员工设置_分页查询-->
  <select id="findAllUser" resultMap="UserSetResultMap">
        select user_id,user_name,dept_id,dept_name,dept_position_id,position_name,user_inductiontime,user_integral,user_status,user_password from v_userset
    </select>
  <select id="getUserById" resultMap="UserSetResultMap">
        select user_id,user_name,dept_id,dept_name,dept_position_id,position_name,user_inductiontime,user_integral,user_status,user_password from v_userset where user_id=#{userId}
    </select>
  <!--综服中心_员工设置_模糊查询-->
  <select id="findByKeyWord" resultMap="UserSetResultMap">
        select user_id,user_name,dept_id,dept_name,dept_position_id,position_name,user_inductiontime,user_integral,user_status,user_password
        from
         where user_name like concat(concat('%',#{keyWord}),'%') or dept_name like concat(concat('%',#{keyWord}),'%')
    </select>
  <insert id="addUser" parameterType="com.kaituo.pms.bean.User" >
    insert into p_user(user_name,dept_position_id,user_id,user_inductiontime,user_integral,user_status,user_password) values(#{userName},#{deptName},#{positionName},#{userId},#{userInductiontime},#{userIntegral},#{userStatus},#{userPassword})

  </insert>

  <resultMap id="UserRoleResultMap" type="com.kaituo.pms.bean.User" >
  <constructor >
    <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
  </constructor>
  </resultMap>
  <resultMap id="RoleUserResultMap" type="com.kaituo.pms.bean.User" >
    <constructor >
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dept_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="position_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="induction_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <select id="findUserRole" resultMap="UserRoleResultMap">
        select user_id,user_name  from p_user where user_status!=4 and user_status!=5
    </select>

  <select id="findRoleUser" resultMap="RoleUserResultMap">
      SELECT u.user_id,u.user_name,dept_name,position_name,induction_time
      FROM (SELECT (SELECT @num:=@num+1 FROM (SELECT @num:=0) n)  AS num,v.* FROM
          (SELECT
               u.user_name          AS user_name,
               d.dept_name          AS dept_name,
               p.position_name      AS position_name,
               u.user_id            AS user_id,
               u.user_inductiontime AS user_inductiontime,
               u.user_integral      AS user_integral,
               u.user_status        AS user_status,
               u.user_password      AS user_password
           FROM p_user u,p_dept d,p_position p
           WHERE u.user_dept_position = p.dept_position_id
                 AND p.dept_id = d.dept_id
                 AND u.user_status != 4
                 AND u.user_status != 5
           ORDER BY u.user_integral DESC) v) v_user,
          (SELECT user_id,induction_time FROM p_user_role GROUP BY user_id,induction_time) r,p_user u WHERE
          u.`user_id`=r.`user_id` AND u.`user_id`=v_user.`user_id`
    </select>
<select id="findall" resultMap="BaseResultMap">
    select user_id
    from p_user
</select>

</mapper>